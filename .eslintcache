[{"/home/bar/Projects/p4ssw0rd/src/App.tsx":"1","/home/bar/Projects/p4ssw0rd/src/components/PasswordLengthBox.tsx":"2","/home/bar/Projects/p4ssw0rd/src/components/base/OptionBox.tsx":"3","/home/bar/Projects/p4ssw0rd/src/components/SpecialCharactersBox.tsx":"4","/home/bar/Projects/p4ssw0rd/src/components/HaveIBeenPwned.tsx":"5","/home/bar/Projects/p4ssw0rd/src/reportWebVitals.ts":"6","/home/bar/Projects/p4ssw0rd/src/components/PasswordContainer.tsx":"7","/home/bar/Projects/p4ssw0rd/src/index.tsx":"8","/home/bar/Projects/p4ssw0rd/src/components/PasswordGenerator.tsx":"9","/home/bar/Projects/p4ssw0rd/src/components/base/SpecialCharacter.tsx":"10"},{"size":606,"mtime":1614499286967,"results":"11","hashOfConfig":"12"},{"size":2309,"mtime":1607085272032,"results":"13","hashOfConfig":"12"},{"size":962,"mtime":1607865661620,"results":"14","hashOfConfig":"15"},{"size":745,"mtime":1606312056370,"results":"16","hashOfConfig":"15"},{"size":2226,"mtime":1607432486060,"results":"17","hashOfConfig":"12"},{"size":426,"mtime":1604753855198,"results":"18","hashOfConfig":"15"},{"size":1313,"mtime":1607084526114,"results":"19","hashOfConfig":"15"},{"size":501,"mtime":1605274024533,"results":"20","hashOfConfig":"12"},{"size":4766,"mtime":1606655056694,"results":"21","hashOfConfig":"12"},{"size":442,"mtime":1606309775000,"results":"22","hashOfConfig":"12"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"h3lg9u",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"zpsba5",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/bar/Projects/p4ssw0rd/src/App.tsx",[],"/home/bar/Projects/p4ssw0rd/src/components/PasswordLengthBox.tsx",[],"/home/bar/Projects/p4ssw0rd/src/components/base/OptionBox.tsx",[],"/home/bar/Projects/p4ssw0rd/src/components/SpecialCharactersBox.tsx",[],["47","48"],"/home/bar/Projects/p4ssw0rd/src/components/HaveIBeenPwned.tsx",["49"],"/home/bar/Projects/p4ssw0rd/src/reportWebVitals.ts",[],["50","51"],"/home/bar/Projects/p4ssw0rd/src/components/PasswordContainer.tsx",[],"/home/bar/Projects/p4ssw0rd/src/index.tsx",[],"/home/bar/Projects/p4ssw0rd/src/components/PasswordGenerator.tsx",["52"],"import React, { useState, useReducer, useEffect } from \"react\";\nimport OptionBox from \"src/components/base/OptionBox\";\nimport PasswordContainer from \"src/components/PasswordContainer\";\nimport PasswordLengthBox from \"src/components/PasswordLengthBox\";\nimport HaveIBeenPwned from \"src/components/HaveIBeenPwned\";\nimport SpecialCharactersBox from \"src/components/SpecialCharactersBox\";\nimport \"./PasswordGenerator.scss\";\n\nconst randomize = require(\"randomatic\");\nconst uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nconst lowercase = \"abcdefghijklmnopqrstuvwxyz\";\nconst numeric = \"0123456789\";\nconst specialChars = \"!?\\\"#$%&'*+,.:;<=>@^~-_`[](){}/|\\\\\";\nconst defaultLength = 16;\nconst minLength = 8;\nconst maxLength = 64;\n\ntype Actions =\n  | { type: \"include\"; chars: string }\n  | { type: \"exclude\"; chars: string }\n  | { type: \"replace\"; chars: string };\n\nconst IncludedSpecialReducer = (state: string, action: Actions) => {\n  switch (action.type) {\n    case \"exclude\":\n      return state.replace(new RegExp(`\\\\${action.chars}`, \"g\"), \"\");\n    case \"include\":\n      return state.concat(action.chars);\n    case \"replace\":\n      return action.chars;\n  }\n};\n\nconst PasswordGenerator: React.FC<{}> = () => {\n  const [password, setPassword] = useState<string>(\"\");\n  const [length, setLength] = useState<number>(defaultLength);\n  const [includeUppercase, setIncludeUppercase] = useState<boolean>(true);\n  const [includeLowercase, setIncludeLowercase] = useState<boolean>(true);\n  const [includeNumbers, setIncludeNumbers] = useState<boolean>(true);\n  const [includedSpecial, setIncludedSpecial] = useReducer(\n    IncludedSpecialReducer,\n    \"!?@#&_\"\n  );\n  const allowPasswordGeneration =\n    includeUppercase ||\n    includeLowercase ||\n    includeNumbers ||\n    includedSpecial.length > 0;\n\n  useEffect(() => {\n    generatePassword();\n  }, []);\n\n  const generatePassword = () => {\n    let chars = includedSpecial;\n    if (includeUppercase) chars = chars.concat(uppercase);\n    if (includeLowercase) chars = chars.concat(lowercase);\n    if (includeNumbers) chars = chars.concat(numeric);\n    setPassword(randomize(\"?\", length, { chars: chars }));\n  };\n\n  const updateLength = (length: number) => {\n    setLength(length < 1 ? 1 : length);\n  };\n\n  const toggleChar = (c: string) => {\n    setIncludedSpecial({\n      type: includedSpecial.includes(c) ? \"exclude\" : \"include\",\n      chars: c\n    });\n  };\n\n  const toggleSpecialChars = () => {\n    setIncludedSpecial({\n      type: \"replace\",\n      chars: includedSpecial.length < specialChars.length ? specialChars : \"\"\n    });\n  };\n\n  return (\n    <div id=\"generator\">\n      <div className=\"column-container\">\n        <PasswordLengthBox\n          length={length}\n          min={minLength}\n          max={maxLength}\n          setLength={updateLength}\n        />\n        <OptionBox\n          text={`Uppercase Letters`}\n          subText={uppercase}\n          checked={includeUppercase}\n          indeterminate={false}\n          handleClick={() =>\n            setIncludeUppercase((includeUppercase) => !includeUppercase)\n          }\n        />\n        <OptionBox\n          text={`Lowercase Letters`}\n          subText={lowercase}\n          checked={includeLowercase}\n          indeterminate={false}\n          handleClick={() =>\n            setIncludeLowercase((includeLowercase) => !includeLowercase)\n          }\n        />\n        <OptionBox\n          text={`Numerical Characters`}\n          subText={numeric}\n          checked={includeNumbers}\n          indeterminate={false}\n          handleClick={() =>\n            setIncludeNumbers((includeNumbers) => !includeNumbers)\n          }\n        />\n        <SpecialCharactersBox\n          toggleChar={toggleChar}\n          includedChars={includedSpecial}\n          specialChars={specialChars}\n        >\n          <OptionBox\n            text={`Special Characters`}\n            subText={specialChars}\n            checked={includedSpecial.length >= specialChars.length}\n            indeterminate={\n              includedSpecial.length > 0 &&\n              includedSpecial.length < specialChars.length\n            }\n            handleClick={toggleSpecialChars}\n          />\n        </SpecialCharactersBox>\n        <button\n          onClick={generatePassword}\n          id=\"generate-password-button\"\n          disabled={!allowPasswordGeneration}\n          className=\"button--main\"\n        >\n          {allowPasswordGeneration\n            ? \"Generate Password\"\n            : \"Please select at least one character set to continue!\"}\n        </button>\n      </div>\n      <div className=\"column-container\">\n        <PasswordContainer setPassword={setPassword} password={password} />\n        <HaveIBeenPwned password={password} />\n      </div>\n    </div>\n  );\n};\n\nexport default PasswordGenerator;\n",["53","54"],"/home/bar/Projects/p4ssw0rd/src/components/base/SpecialCharacter.tsx",[],{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":48,"column":6,"nodeType":"61","endLine":48,"endColumn":16,"suggestions":"62"},{"ruleId":"55","replacedBy":"63"},{"ruleId":"57","replacedBy":"64"},{"ruleId":"59","severity":1,"message":"65","line":52,"column":6,"nodeType":"61","endLine":52,"endColumn":8,"suggestions":"66"},{"ruleId":"55","replacedBy":"67"},{"ruleId":"57","replacedBy":"68"},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'verify'. Either include it or remove the dependency array.","ArrayExpression",["71"],["69"],["70"],"React Hook useEffect has a missing dependency: 'generatePassword'. Either include it or remove the dependency array.",["72"],["69"],["70"],"no-global-assign","no-unsafe-negation",{"desc":"73","fix":"74"},{"desc":"75","fix":"76"},"Update the dependencies array to be: [password, verify]",{"range":"77","text":"78"},"Update the dependencies array to be: [generatePassword]",{"range":"79","text":"80"},[1364,1374],"[password, verify]",[1829,1831],"[generatePassword]"]