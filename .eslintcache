[{"/home/bar/Projects/p4ssw0rd/src/App.tsx":"1","/home/bar/Projects/p4ssw0rd/src/components/PasswordLengthBox.tsx":"2","/home/bar/Projects/p4ssw0rd/src/components/base/OptionBox.tsx":"3","/home/bar/Projects/p4ssw0rd/src/components/SpecialCharactersBox.tsx":"4","/home/bar/Projects/p4ssw0rd/src/components/HaveIBeenPwned.tsx":"5","/home/bar/Projects/p4ssw0rd/src/reportWebVitals.ts":"6","/home/bar/Projects/p4ssw0rd/src/components/PasswordContainer.tsx":"7","/home/bar/Projects/p4ssw0rd/src/index.tsx":"8","/home/bar/Projects/p4ssw0rd/src/components/PasswordGenerator.tsx":"9","/home/bar/Projects/p4ssw0rd/src/components/base/SpecialCharacter.tsx":"10"},{"size":838,"mtime":1607863209235,"results":"11","hashOfConfig":"12"},{"size":2309,"mtime":1607085272032,"results":"13","hashOfConfig":"12"},{"size":962,"mtime":1607865661620,"results":"14","hashOfConfig":"12"},{"size":745,"mtime":1606312056370,"results":"15","hashOfConfig":"12"},{"size":2226,"mtime":1607432486060,"results":"16","hashOfConfig":"12"},{"size":426,"mtime":1604753855198,"results":"17","hashOfConfig":"12"},{"size":1313,"mtime":1607084526114,"results":"18","hashOfConfig":"12"},{"size":501,"mtime":1605274024533,"results":"19","hashOfConfig":"12"},{"size":4766,"mtime":1606655056694,"results":"20","hashOfConfig":"12"},{"size":442,"mtime":1606309775000,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"zpsba5",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/bar/Projects/p4ssw0rd/src/App.tsx",["46","47"],"/home/bar/Projects/p4ssw0rd/src/components/PasswordLengthBox.tsx",[],["48","49"],"/home/bar/Projects/p4ssw0rd/src/components/base/OptionBox.tsx",[],"/home/bar/Projects/p4ssw0rd/src/components/SpecialCharactersBox.tsx",[],"/home/bar/Projects/p4ssw0rd/src/components/HaveIBeenPwned.tsx",["50"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./HaveIBeenPwned.scss\";\nconst sha1 = require(\"sha-1\");\nconst api = \"https://api.pwnedpasswords.com/range/\";\n\nconst HaveIBeenPwned: React.FC<{ password: string }> = ({ password }) => {\n  const [verified, setVerified] = useState<boolean>(false);\n  const [instances, setInstances] = useState<number>(0);\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const getStatus = (verified: boolean, instances: number) => {\n    if (loading) return \"loading\";\n    return verified ? (instances > 0 ? \"unsafe\" : \"safe\") : \"unverified\";\n  };\n\n  const status = getStatus(verified, instances);\n\n  const verify = () => {\n    if (!loading) {\n      const hash = sha1(password).toUpperCase();\n      setLoading(true);\n      axios\n        .get(api.concat(hash.substring(0, 5)))\n        .then((response) => {\n          const count = findPassword(\n            hash.substring(5, hash.length),\n            response.data\n          );\n          setVerified(true);\n          setInstances(count);\n        })\n        .catch((error) => {\n          if (error.statusCode === 429) {\n            alert(error.message);\n          }\n        })\n        .finally(() => {\n          setLoading(false);\n        });\n    }\n  };\n\n  useEffect(() => {\n    setVerified(false);\n    setInstances(0);\n    verify();\n  }, [password]);\n\n  const findPassword = (suffix: String, data: String) => {\n    const dataArr: string[] = data.split(\"\\r\\n\");\n    for (let str of dataArr) {\n      const entryArr: string[] = str.split(\":\");\n      if (entryArr[0] === suffix) {\n        return parseInt(entryArr[1]);\n      }\n    }\n    return 0;\n  };\n\n  return (\n    <div\n      className={`hibp-container hibp-container--${status}`}\n      onClick={verify}\n    >\n      <div className={`status status--${status}`}>\n        <span>{status}</span>\n        <span>{`Powered by HaveIBeenPwned`}</span>\n      </div>\n      <span className=\"message\">{`Generated passwords are automatically cross-checked with the Pwned Passwords database to verify its uniqueness.`}</span>\n      <span className=\"instructions\">{`Click anywhere to re-verify your password.`}</span>\n    </div>\n  );\n};\nexport default HaveIBeenPwned;\n","/home/bar/Projects/p4ssw0rd/src/reportWebVitals.ts",[],["51","52"],"/home/bar/Projects/p4ssw0rd/src/components/PasswordContainer.tsx",[],"/home/bar/Projects/p4ssw0rd/src/index.tsx",[],"/home/bar/Projects/p4ssw0rd/src/components/PasswordGenerator.tsx",["53"],"import React, { useState, useReducer, useEffect } from \"react\";\nimport OptionBox from \"src/components/base/OptionBox\";\nimport PasswordContainer from \"src/components/PasswordContainer\";\nimport PasswordLengthBox from \"src/components/PasswordLengthBox\";\nimport HaveIBeenPwned from \"src/components/HaveIBeenPwned\";\nimport SpecialCharactersBox from \"src/components/SpecialCharactersBox\";\nimport \"./PasswordGenerator.scss\";\n\nconst randomize = require(\"randomatic\");\nconst uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nconst lowercase = \"abcdefghijklmnopqrstuvwxyz\";\nconst numeric = \"0123456789\";\nconst specialChars = \"!?\\\"#$%&'*+,.:;<=>@^~-_`[](){}/|\\\\\";\nconst defaultLength = 16;\nconst minLength = 8;\nconst maxLength = 64;\n\ntype Actions =\n  | { type: \"include\"; chars: string }\n  | { type: \"exclude\"; chars: string }\n  | { type: \"replace\"; chars: string };\n\nconst IncludedSpecialReducer = (state: string, action: Actions) => {\n  switch (action.type) {\n    case \"exclude\":\n      return state.replace(new RegExp(`\\\\${action.chars}`, \"g\"), \"\");\n    case \"include\":\n      return state.concat(action.chars);\n    case \"replace\":\n      return action.chars;\n  }\n};\n\nconst PasswordGenerator: React.FC<{}> = () => {\n  const [password, setPassword] = useState<string>(\"\");\n  const [length, setLength] = useState<number>(defaultLength);\n  const [includeUppercase, setIncludeUppercase] = useState<boolean>(true);\n  const [includeLowercase, setIncludeLowercase] = useState<boolean>(true);\n  const [includeNumbers, setIncludeNumbers] = useState<boolean>(true);\n  const [includedSpecial, setIncludedSpecial] = useReducer(\n    IncludedSpecialReducer,\n    \"!?@#&_\"\n  );\n  const allowPasswordGeneration =\n    includeUppercase ||\n    includeLowercase ||\n    includeNumbers ||\n    includedSpecial.length > 0;\n\n  useEffect(() => {\n    generatePassword();\n  }, []);\n\n  const generatePassword = () => {\n    let chars = includedSpecial;\n    if (includeUppercase) chars = chars.concat(uppercase);\n    if (includeLowercase) chars = chars.concat(lowercase);\n    if (includeNumbers) chars = chars.concat(numeric);\n    setPassword(randomize(\"?\", length, { chars: chars }));\n  };\n\n  const updateLength = (length: number) => {\n    setLength(length < 1 ? 1 : length);\n  };\n\n  const toggleChar = (c: string) => {\n    setIncludedSpecial({\n      type: includedSpecial.includes(c) ? \"exclude\" : \"include\",\n      chars: c\n    });\n  };\n\n  const toggleSpecialChars = () => {\n    setIncludedSpecial({\n      type: \"replace\",\n      chars: includedSpecial.length < specialChars.length ? specialChars : \"\"\n    });\n  };\n\n  return (\n    <div id=\"generator\">\n      <div className=\"column-container\">\n        <PasswordLengthBox\n          length={length}\n          min={minLength}\n          max={maxLength}\n          setLength={updateLength}\n        />\n        <OptionBox\n          text={`Uppercase Letters`}\n          subText={uppercase}\n          checked={includeUppercase}\n          indeterminate={false}\n          handleClick={() =>\n            setIncludeUppercase((includeUppercase) => !includeUppercase)\n          }\n        />\n        <OptionBox\n          text={`Lowercase Letters`}\n          subText={lowercase}\n          checked={includeLowercase}\n          indeterminate={false}\n          handleClick={() =>\n            setIncludeLowercase((includeLowercase) => !includeLowercase)\n          }\n        />\n        <OptionBox\n          text={`Numerical Characters`}\n          subText={numeric}\n          checked={includeNumbers}\n          indeterminate={false}\n          handleClick={() =>\n            setIncludeNumbers((includeNumbers) => !includeNumbers)\n          }\n        />\n        <SpecialCharactersBox\n          toggleChar={toggleChar}\n          includedChars={includedSpecial}\n          specialChars={specialChars}\n        >\n          <OptionBox\n            text={`Special Characters`}\n            subText={specialChars}\n            checked={includedSpecial.length >= specialChars.length}\n            indeterminate={\n              includedSpecial.length > 0 &&\n              includedSpecial.length < specialChars.length\n            }\n            handleClick={toggleSpecialChars}\n          />\n        </SpecialCharactersBox>\n        <button\n          onClick={generatePassword}\n          id=\"generate-password-button\"\n          disabled={!allowPasswordGeneration}\n          className=\"button--main\"\n        >\n          {allowPasswordGeneration\n            ? \"Generate Password\"\n            : \"Please select at least one character set to continue!\"}\n        </button>\n      </div>\n      <div className=\"column-container\">\n        <PasswordContainer setPassword={setPassword} password={password} />\n        <HaveIBeenPwned password={password} />\n      </div>\n    </div>\n  );\n};\n\nexport default PasswordGenerator;\n","/home/bar/Projects/p4ssw0rd/src/components/base/SpecialCharacter.tsx",[],{"ruleId":"54","severity":1,"message":"55","line":9,"column":9,"nodeType":"56","messageId":"57","endLine":9,"endColumn":20},{"ruleId":"58","severity":1,"message":"59","line":11,"column":6,"nodeType":"60","endLine":11,"endColumn":16,"suggestions":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"58","severity":1,"message":"66","line":48,"column":6,"nodeType":"60","endLine":48,"endColumn":16,"suggestions":"67"},{"ruleId":"62","replacedBy":"68"},{"ruleId":"64","replacedBy":"69"},{"ruleId":"58","severity":1,"message":"70","line":52,"column":6,"nodeType":"60","endLine":52,"endColumn":8,"suggestions":"71"},"@typescript-eslint/no-unused-vars","'toggleTheme' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useCallback has an unnecessary dependency: 'darkMode'. Either exclude it or remove the dependency array.","ArrayExpression",["72"],"no-native-reassign",["73"],"no-negated-in-lhs",["74"],"React Hook useEffect has a missing dependency: 'verify'. Either include it or remove the dependency array.",["75"],["73"],["74"],"React Hook useEffect has a missing dependency: 'generatePassword'. Either include it or remove the dependency array.",["76"],{"desc":"77","fix":"78"},"no-global-assign","no-unsafe-negation",{"desc":"79","fix":"80"},{"desc":"81","fix":"82"},"Update the dependencies array to be: []",{"range":"83","text":"84"},"Update the dependencies array to be: [password, verify]",{"range":"85","text":"86"},"Update the dependencies array to be: [generatePassword]",{"range":"87","text":"88"},[387,397],"[]",[1364,1374],"[password, verify]",[1829,1831],"[generatePassword]"]